#include "FTCalHitEneCorr_factory.h"
#include "FTCalHit.h"
#include "FTCalHitEneCorr.h"
#include "JANA/JEvent.h"

#include "DAQ/faWaveboardHit.h"
#include "DAQ/fa250VTPMode7Hit.h"

#include "JANA/Services/JParameterManager.h"
#include "JANA/Calibrations/JCalibration.h"
#include "JANA/Calibrations/JCalibrationManager.h"

FTCalHitEneCorr_factory::FTCalHitEneCorr_factory() {
	// TODO Auto-generated constructor stub
	m_tt = 0;

	//These parameters are hard-coded in java recon
	// GEOMETRY PARAMETERS
	CRYS_DELTA = 11.5;
	CRYS_WIDTH = 15.3;													  // crystal width in mm
	CRYS_LENGTH = 200.;													  // crystal length in mm
	CRYS_ZPOS = 1898.;

	/*
	 File generated by code makeGainFiles (author: Andrea Celentano) on: 2020-03-11.17:04:14
	 Gain file used: FTCalCosmic_31975_31976_5deg_08-22-2018_08.53.29_AMcorrected.txt
	 SCALE: 1.2
	 */

}

FTCalHitEneCorr_factory::~FTCalHitEneCorr_factory() {
	// TODO Auto-generated destructor stub

}

void FTCalHitEneCorr_factory::Init() {

}
void FTCalHitEneCorr_factory::ChangeRun(const std::shared_ptr<const JEvent> &aEvent) {

	if (m_tt == 0) {
		//std::cout << "FTCalHit_factory::get TT" << std::endl;
		m_tt = aEvent->GetSingle<TranslationTable>();
		//	std::cout << "FTCalHit_factory: got TT" << std::endl;
	}

	static int hasLoaded = 0;
	if (hasLoaded == 0) {
		auto jcalib_manager = japp->GetService<JCalibrationManager>();
		static int runN = 11324;
		auto jcalib = jcalib_manager->GetJCalibration(11324);

		//Load FT-HODO
		std::vector<std::vector<double>> data;
		jcalib->Get("/calibration/ft/ftcal/charge_to_energy", data);

		for (auto row : data) {
			//sector - layer - component - mips_charge - mips_energy - fadc_to_charge - preamp_gain - apd_gain
			auto sector = int(row[0]);
			auto layer = int(row[1]);
			auto component = int(row[2]);
			mips_charge[component - 1] = row[3];
		}

		daq_gain[0][3][0] = 0.118104;
		daq_gain[0][3][1] = 0.155948;
		daq_gain[0][3][2] = 0.137848;
		daq_gain[0][3][3] = 0.137981;
		daq_gain[0][3][4] = 0.14011;
		daq_gain[0][3][5] = 0.14685;
		daq_gain[0][3][6] = 0.17934;
		daq_gain[0][3][7] = 0.119183;
		daq_gain[0][3][8] = 0.16009;
		daq_gain[0][3][9] = 0.17934;
		daq_gain[0][3][10] = 0.128837;
		daq_gain[0][3][11] = 0.132993;
		daq_gain[0][3][12] = 0.151598;
		daq_gain[0][3][13] = 0.151534;
		daq_gain[0][3][14] = 0.14691;
		daq_gain[0][3][15] = 0.0017934;

		daq_gain[0][4][0] = 0.129394;
		daq_gain[0][4][1] = 0.131337;
		daq_gain[0][4][2] = 0.17934;
		daq_gain[0][4][3] = 0.174117;
		daq_gain[0][4][4] = 0.130834;
		daq_gain[0][4][5] = 0.17934;
		daq_gain[0][4][6] = 0.161896;
		daq_gain[0][4][7] = 0.150928;
		daq_gain[0][4][8] = 0.174117;
		daq_gain[0][4][9] = 0.17934;
		daq_gain[0][4][10] = 0.153907;
		daq_gain[0][4][11] = 0.147061;
		daq_gain[0][4][12] = 0.140137;
		daq_gain[0][4][13] = 0.17934;
		daq_gain[0][4][14] = 0.17934;
		daq_gain[0][4][15] = 0.163259;

		daq_gain[0][5][0] = 0.154139;
		daq_gain[0][5][1] = 0.157974;
		daq_gain[0][5][2] = 0.175997;
		daq_gain[0][5][3] = 0.15787;
		daq_gain[0][5][4] = 0.139673;
		daq_gain[0][5][5] = 0.137981;
		daq_gain[0][5][6] = 0.144892;
		daq_gain[0][5][7] = 0.17934;
		daq_gain[0][5][8] = 0.163557;
		daq_gain[0][5][9] = 0.140411;
		daq_gain[0][5][10] = 0.17591;
		daq_gain[0][5][11] = 0.17934;
		daq_gain[0][5][12] = 0.143962;
		daq_gain[0][5][13] = 0.120363;
		daq_gain[0][5][14] = 0.141241;
		daq_gain[0][5][15] = 0.239121;

		daq_gain[0][6][0] = 0.143933;
		daq_gain[0][6][1] = 0.149016;
		daq_gain[0][6][2] = 0.17934;
		daq_gain[0][6][3] = 0.121876;
		daq_gain[0][6][4] = 0.147666;
		daq_gain[0][6][5] = 0.130028;
		daq_gain[0][6][6] = 0.126944;
		daq_gain[0][6][7] = 0.144309;
		daq_gain[0][6][8] = 0.152371;
		daq_gain[0][6][9] = 0.123982;
		daq_gain[0][6][10] = 0.117408;
		daq_gain[0][6][11] = 0.117082;
		daq_gain[0][6][12] = 0.122962;
		daq_gain[0][6][13] = 0.140991;
		daq_gain[0][6][14] = 0.138916;
		daq_gain[0][6][15] = 0.170638;

		daq_gain[0][7][0] = 0.1196;
		daq_gain[0][7][1] = 0.11994;
		daq_gain[0][7][2] = 0.109421;
		daq_gain[0][7][3] = 0.132599;
		daq_gain[0][7][4] = 0.144513;
		daq_gain[0][7][5] = 0.149513;
		daq_gain[0][7][6] = 0.138407;
		daq_gain[0][7][7] = 0.118416;
		daq_gain[0][7][8] = 0.12198;
		daq_gain[0][7][9] = 0.154238;
		daq_gain[0][7][10] = 0.125963;
		daq_gain[0][7][11] = 0.127554;
		daq_gain[0][7][12] = 0.126163;
		daq_gain[0][7][13] = 0.137769;
		daq_gain[0][7][14] = 0.204961;
		daq_gain[0][7][15] = 0.127963;

		daq_gain[0][8][0] = 0.128813;
		daq_gain[0][8][1] = 0.127986;
		daq_gain[0][8][2] = 0.154737;
		daq_gain[0][8][3] = 0.137242;
		daq_gain[0][8][4] = 0.128421;
		daq_gain[0][8][5] = 0.116568;
		daq_gain[0][8][6] = 0.124564;
		daq_gain[0][8][7] = 0.11604;
		daq_gain[0][8][8] = 0.11992;
		daq_gain[0][8][9] = 0.14011;
		daq_gain[0][8][10] = 0.139946;
		daq_gain[0][8][11] = 0.145127;
		daq_gain[0][8][12] = 0.141185;
		daq_gain[0][8][13] = 0.131337;
		daq_gain[0][8][14] = 0.127079;
		daq_gain[0][8][15] = 0.111565;

		daq_gain[0][9][0] = 0.147091;
		daq_gain[0][9][1] = 0.12849;
		daq_gain[0][9][2] = 0.140274;
		daq_gain[0][9][3] = 0.128583;
		daq_gain[0][9][4] = 0.140165;
		daq_gain[0][9][5] = 0.17934;
		daq_gain[0][9][6] = 0.11824;
		daq_gain[0][9][7] = 0.136096;
		daq_gain[0][9][8] = 0.131169;
		daq_gain[0][9][9] = 0.138728;
		daq_gain[0][9][10] = 0.115036;
		daq_gain[0][9][11] = 0.153054;
		daq_gain[0][9][12] = 0.124932;
		daq_gain[0][9][13] = 0.142503;
		daq_gain[0][9][14] = 0.125743;
		daq_gain[0][9][15] = 0.167922;

		daq_gain[0][10][0] = 0.158638;
		daq_gain[0][10][1] = 0.204961;
		daq_gain[0][10][2] = 0.121546;
		daq_gain[0][10][3] = 0.162042;
		daq_gain[0][10][4] = 0.126252;
		daq_gain[0][10][5] = 0.168474;
		daq_gain[0][10][6] = 0.144892;
		daq_gain[0][10][7] = 0.140521;
		daq_gain[0][10][8] = 0.123747;
		daq_gain[0][10][9] = 0.130834;
		daq_gain[0][10][10] = 0.139728;
		daq_gain[0][10][11] = 0.122396;
		daq_gain[0][10][12] = 0.125216;
		daq_gain[0][10][13] = 0.134893;
		daq_gain[0][10][14] = 0.148892;
		daq_gain[0][10][15] = 0.167412;

		daq_gain[0][13][0] = 0.125633;
		daq_gain[0][13][1] = 0.204961;
		daq_gain[0][13][2] = 0.17934;
		daq_gain[0][13][3] = 0.17934;
		daq_gain[0][13][4] = 0.151119;
		daq_gain[0][13][5] = 0.179251;
		daq_gain[0][13][6] = 0.126497;
		daq_gain[0][13][7] = 0.144338;
		daq_gain[0][13][8] = 0.14548;
		daq_gain[0][13][9] = 0.204961;
		daq_gain[0][13][10] = 0.177521;
		daq_gain[0][13][11] = 0.17934;
		daq_gain[0][13][12] = 0.15039;
		daq_gain[0][13][13] = 0.204961;
		daq_gain[0][13][14] = 0.124197;
		daq_gain[0][13][15] = 0.147151;

		daq_gain[0][14][0] = 0.165253;
		daq_gain[0][14][1] = 0.112881;
		daq_gain[0][14][2] = 0.17934;
		daq_gain[0][14][3] = 0.148062;
		daq_gain[0][14][4] = 0.122312;
		daq_gain[0][14][5] = 0.142193;
		daq_gain[0][14][6] = 0.127012;
		daq_gain[0][14][7] = 0.159308;
		daq_gain[0][14][8] = 0.129115;
		daq_gain[0][14][9] = 0.17934;
		daq_gain[0][14][10] = 0.138034;
		daq_gain[0][14][11] = 0.132599;
		daq_gain[0][14][12] = 0.149669;
		daq_gain[0][14][13] = 0.166945;
		daq_gain[0][14][14] = 0.17934;
		daq_gain[0][14][15] = 0.129511;

		daq_gain[0][15][0] = 0.148861;
		daq_gain[0][15][1] = 0.11153;
		daq_gain[0][15][2] = 0.128675;
		daq_gain[0][15][3] = 0.204961;
		daq_gain[0][15][4] = 0.130169;
		daq_gain[0][15][5] = 0.153874;
		daq_gain[0][15][6] = 0.160484;
		daq_gain[0][15][7] = 0.129581;
		daq_gain[0][15][8] = 0.117755;
		daq_gain[0][15][9] = 0.141408;
		daq_gain[0][15][10] = 0.17934;
		daq_gain[0][15][11] = 0.161277;
		daq_gain[0][15][12] = 1;
		daq_gain[0][15][13] = 1;
		daq_gain[0][15][14] = 1;
		daq_gain[0][15][15] = 1;

		daq_gain[1][3][0] = 0.17934;
		daq_gain[1][3][1] = 0.148277;
		daq_gain[1][3][2] = 0.17934;
		daq_gain[1][3][3] = 0.164306;
		daq_gain[1][3][4] = 0.155475;
		daq_gain[1][3][5] = 0.147514;
		daq_gain[1][3][6] = 0.17934;
		daq_gain[1][3][7] = 0.137716;
		daq_gain[1][3][8] = 0.204961;
		daq_gain[1][3][9] = 0.139321;
		daq_gain[1][3][10] = 0.150675;
		daq_gain[1][3][11] = 0.131121;
		daq_gain[1][3][12] = 0.13951;
		daq_gain[1][3][13] = 0.130122;
		daq_gain[1][3][14] = 0.239121;
		daq_gain[1][3][15] = 0.17934;

		daq_gain[1][4][0] = 0.145865;
		daq_gain[1][4][1] = 0.204961;
		daq_gain[1][4][2] = 0.14273;
		daq_gain[1][4][3] = 0.130596;
		daq_gain[1][4][4] = 0.126052;
		daq_gain[1][4][5] = 0.204961;
		daq_gain[1][4][6] = 0.17934;
		daq_gain[1][4][7] = 0.176343;
		daq_gain[1][4][8] = 0.136407;
		daq_gain[1][4][9] = 0.142475;
		daq_gain[1][4][10] = 0.136692;
		daq_gain[1][4][11] = 0.16895;
		daq_gain[1][4][12] = 0.138034;
		daq_gain[1][4][13] = 0.168632;
		daq_gain[1][4][14] = 0.126363;
		daq_gain[1][4][15] = 0.17934;

		daq_gain[1][5][0] = 0.178804;
		daq_gain[1][5][1] = 0.121566;
		daq_gain[1][5][2] = 0.151342;
		daq_gain[1][5][3] = 0.125523;
		daq_gain[1][5][4] = 0.118887;
		daq_gain[1][5][5] = 0.131844;
		daq_gain[1][5][6] = 0.150675;
		daq_gain[1][5][7] = 0.17934;
		daq_gain[1][5][8] = 0.14843;
		daq_gain[1][5][9] = 0.17934;
		daq_gain[1][5][10] = 0.1281;
		daq_gain[1][5][11] = 0.145865;
		daq_gain[1][5][12] = 0.128999;
		daq_gain[1][5][13] = 0.0017934;
		daq_gain[1][5][14] = 0.113113;
		daq_gain[1][5][15] = 0.140247;

		daq_gain[1][6][0] = 0.145716;
		daq_gain[1][6][1] = 0.128215;
		daq_gain[1][6][2] = 0.140302;
		daq_gain[1][6][3] = 0.150833;
		daq_gain[1][6][4] = 0.137163;
		daq_gain[1][6][5] = 0.124154;
		daq_gain[1][6][6] = 0.145569;
		daq_gain[1][6][7] = 0.124911;
		daq_gain[1][6][8] = 0.139158;
		daq_gain[1][6][9] = 0.129792;
		daq_gain[1][6][10] = 0.138487;
		daq_gain[1][6][11] = 0.133141;
		daq_gain[1][6][12] = 0.12379;
		daq_gain[1][6][13] = 0.135351;
		daq_gain[1][6][14] = 0.12735;
		daq_gain[1][6][15] = 0.13711;

		daq_gain[1][7][0] = 0.135454;
		daq_gain[1][7][1] = 0.136381;
		daq_gain[1][7][2] = 0.127147;
		daq_gain[1][7][3] = 0.128813;
		daq_gain[1][7][4] = 0.172071;
		daq_gain[1][7][5] = 0.17934;
		daq_gain[1][7][6] = 0.135915;
		daq_gain[1][7][7] = 0.136458;
		daq_gain[1][7][8] = 0.123555;
		daq_gain[1][7][9] = 0.134388;
		daq_gain[1][7][10] = 0.13761;
		daq_gain[1][7][11] = 0.117755;
		daq_gain[1][7][12] = 0.140055;
		daq_gain[1][7][13] = 0.145009;
		daq_gain[1][7][14] = 0.126765;
		daq_gain[1][7][15] = 0.144542;

		daq_gain[1][8][0] = 0.128906;
		daq_gain[1][8][1] = 0.148738;
		daq_gain[1][8][2] = 0.123704;
		daq_gain[1][8][3] = 0.115778;
		daq_gain[1][8][4] = 0.17934;
		daq_gain[1][8][5] = 0.138567;
		daq_gain[1][8][6] = 0.120484;
		daq_gain[1][8][7] = 0.126185;
		daq_gain[1][8][8] = 0.139456;
		daq_gain[1][8][9] = 0.124998;
		daq_gain[1][8][10] = 0.147272;
		daq_gain[1][8][11] = 0.151406;
		daq_gain[1][8][12] = 0.12672;
		daq_gain[1][8][13] = 0.145127;
		daq_gain[1][8][14] = 0.139321;
		daq_gain[1][8][15] = 0.130075;

		daq_gain[1][9][0] = 0.125347;
		daq_gain[1][9][1] = 0.121012;
		daq_gain[1][9][2] = 0.126631;
		daq_gain[1][9][3] = 0.17934;
		daq_gain[1][9][4] = 0.125107;
		daq_gain[1][9][5] = 0.137137;
		daq_gain[1][9][6] = 0.12735;
		daq_gain[1][9][7] = 0.150453;
		daq_gain[1][9][8] = 0.12169;
		daq_gain[1][9][9] = 0.121278;
		daq_gain[1][9][10] = 0.17934;
		daq_gain[1][9][11] = 0.16979;
		daq_gain[1][9][12] = 0.147727;
		daq_gain[1][9][13] = 0.0017934;
		daq_gain[1][9][14] = 0.1446;
		daq_gain[1][9][15] = 0.179296;

		daq_gain[1][10][0] = 0.16907;
		daq_gain[1][10][1] = 0.138889;
		daq_gain[1][10][2] = 0.152371;
		daq_gain[1][10][3] = 0.130122;
		daq_gain[1][10][4] = 0.126967;
		daq_gain[1][10][5] = 0.137294;
		daq_gain[1][10][6] = 0.157282;
		daq_gain[1][10][7] = 0.135198;
		daq_gain[1][10][8] = 0.134312;
		daq_gain[1][10][9] = 0.126407;
		daq_gain[1][10][10] = 0.125282;
		daq_gain[1][10][11] = 0.0017934;
		daq_gain[1][10][12] = 0.123068;
		daq_gain[1][10][13] = 0.135071;
		daq_gain[1][10][14] = 0.15289;
		daq_gain[1][10][15] = 0.17934;

		daq_gain[1][13][0] = 0.163222;
		daq_gain[1][13][1] = 0.177083;
		daq_gain[1][13][2] = 0.138755;
		daq_gain[1][13][3] = 0.17934;
		daq_gain[1][13][4] = 0.165749;
		daq_gain[1][13][5] = 0.0017934;
		daq_gain[1][13][6] = 0.239121;
		daq_gain[1][13][7] = 0.142503;
		daq_gain[1][13][8] = 0.204961;
		daq_gain[1][13][9] = 0.17934;
		daq_gain[1][13][10] = 0.17934;
		daq_gain[1][13][11] = 0.17934;
		daq_gain[1][13][12] = 0.129161;
		daq_gain[1][13][13] = 0.130548;
		daq_gain[1][13][14] = 0.150738;
		daq_gain[1][13][15] = 0.150833;

		daq_gain[1][14][0] = 0.167023;
		daq_gain[1][14][1] = 0.141269;
		daq_gain[1][14][2] = 0.0017934;
		daq_gain[1][14][3] = 0.138193;
		daq_gain[1][14][4] = 0.137478;
		daq_gain[1][14][5] = 0.12526;
		daq_gain[1][14][6] = 0.17934;
		daq_gain[1][14][7] = 0.144659;
		daq_gain[1][14][8] = 0.204961;
		daq_gain[1][14][9] = 0.127057;
		daq_gain[1][14][10] = 0.129161;
		daq_gain[1][14][11] = 0.160699;
		daq_gain[1][14][12] = 0.143875;
		daq_gain[1][14][13] = 0.15394;
		daq_gain[1][14][14] = 0.12271;
		daq_gain[1][14][15] = 0.140494;

		hasLoaded = 1;
	}

}
void FTCalHitEneCorr_factory::Process(const std::shared_ptr<const JEvent> &aEvent) {

	TranslationTable::ChannelInfo m_channel;

	//Get the hits from FADC. Support bot the waveboard hit and the fa250VTPMode7 hit
	auto faHits_waveboard = aEvent->Get<faWaveboardHit>();
	auto faHits_fa250VTPMode7 = aEvent->Get<fa250VTPMode7Hit>();
	std::vector<FTCalHitEneCorr*> allHits;

	for (auto faHit : faHits_waveboard) {

		m_channel = m_tt->getChannelInfo(faHit->m_channel);

		if ((m_channel.det_sys == TranslationTable::FTCAL)) {
			//Convert the waveboard hit. Probably will never be used, unless we will perform FT tests with waveboard.
			//It is used to test the system with data from a waveboard

			//Create a new FTCal Hit Object object
			auto ftCalHit = new FTCalHitEneCorr();

			//Assign the channel
			//Since this comes from the TT, it is still sector-layer-component)
			ftCalHit->m_channel = *(m_channel.FTCAL);

			//Here set iX and iY
			//(see https://github.com/JeffersonLab/clas12-offline-software/blob/development/reconstruction/ft/src/main/java/org/jlab/rec/ft/cal/FTCALHit.java#L40-L41)
			ftCalHit->m_channel.iY = (ftCalHit->m_channel.component / 22) + 1;
			ftCalHit->m_channel.iX = (ftCalHit->m_channel.component + 1) - (ftCalHit->m_channel.iY - 1) * 22;

			//Assign the time
			ftCalHit->setHitTime(4 * faHit->m_time.count());

			//Assign the energy
			//TODO: eventually apply another correction, here I just take the energy as provided by VTP
			ftCalHit->setHitEnergy(faHit->m_charge);

			//Assign the position
			ftCalHit->setHitX((ftCalHit->m_channel.iX - CRYS_DELTA) * CRYS_WIDTH);
			ftCalHit->setHitY((ftCalHit->m_channel.iY - CRYS_DELTA) * CRYS_WIDTH);
			ftCalHit->setHitZ(CRYS_ZPOS);

			allHits.push_back(ftCalHit);

//			mData.push_back(ftCalHit);
		}
	}

	//Here is the important part - converting the faHit from VTPMode7 to ftCalHit
	for (auto faHit : faHits_fa250VTPMode7) {
		m_channel = m_tt->getChannelInfo(faHit->m_channel);
		if ((m_channel.det_sys == TranslationTable::FTCAL)) {

			//Create a new FTCal Hit Object object
			auto ftCalHit = new FTCalHitEneCorr();

			//Assign the channel
			//Since this comes from the TT, it is still sector-layer-component)
			ftCalHit->m_channel = *(m_channel.FTCAL);

			//Here set iX and iY
			//(see https://github.com/JeffersonLab/clas12-offline-software/blob/development/reconstruction/ft/src/main/java/org/jlab/rec/ft/cal/FTCALHit.java#L40-L41)
			ftCalHit->m_channel.iY = (ftCalHit->m_channel.component / 22) + 1;
			ftCalHit->m_channel.iX = (ftCalHit->m_channel.component + 1) - (ftCalHit->m_channel.iY - 1) * 22;

			//Assign the time
			ftCalHit->setHitTime(4 * faHit->m_time.count());

			//Assign the energy
			ftCalHit->setHitEnergyRaw(faHit->m_charge);

			//Assign the position
			ftCalHit->setHitX((ftCalHit->m_channel.iX - CRYS_DELTA) * CRYS_WIDTH);
			ftCalHit->setHitY((ftCalHit->m_channel.iY - CRYS_DELTA) * CRYS_WIDTH);
			ftCalHit->setHitZ(CRYS_ZPOS);

			//Energy correction

			//VTP computes energy = charge * constant, where charge = sum_of_samples
			int theCrate = 0;
			if (faHit->m_channel.crate == 71)
				theCrate = 1;

			auto charge = faHit->m_charge / daq_gain[theCrate][faHit->m_channel.slot][faHit->m_channel.channel];
			//code in https://github.com/JeffersonLab/clas12-offline-software/blob/development/reconstruction/ft/src/main/java/org/jlab/rec/ft/cal/FTCALHit.java
			//chargeNew = charge * fadc_to_charge, where fadc_to_charge = 0.039064
			//ene = calib * cosmics_ene / cosmics_charge, where cosmics_ene = 15.3

			static auto fadc_to_charge = 0.039064;
			static auto cosmic_ene = 15.3;

			charge = charge * fadc_to_charge;
			charge = charge * cosmic_ene / mips_charge[ftCalHit->m_channel.component - 1];

			ftCalHit->setHitEnergy(charge);

			allHits.push_back(ftCalHit);

//			mData.push_back(ftCalHit);
		}
	}
	//If you want all data, you need to comment this loop and to uncomment the //mData.push_back in the previous loop.
	for (int i = 0; i < allHits.size(); i++) {
		bool flag = false;
		for (int j = 0; j < allHits.size(); j++) {
			if (i != j && allHits[i]->getHitIX() == allHits[j]->getHitIX() && allHits[i]->getHitIY() == allHits[j]->getHitIY() && allHits[i]->getHitTime() - allHits[j]->getHitTime() < 160
					&& allHits[i]->getHitTime() - allHits[j]->getHitTime() > 0 && allHits[i]->getHitEnergy() - allHits[j]->getHitEnergy() < 0) {
				flag = true;
				break;
			}
		}
		if (flag == true) {
			delete allHits[i];
		} else {
			mData.push_back(allHits[i]);
		}
	}
}

